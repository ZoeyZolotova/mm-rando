// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace MMR.Randomizer.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using MMR.Randomizer.Extensions;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class HtmlSpoiler : HtmlSpoilerBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("<html>\r\n<head>\r\n<style>\r\n\tbody.dark-mode {\r\n\t  background-color: #111;\r\n\t  color:" +
                    " #ccc;\r\n\t}\r\n\tbody.dark-mode a {\r\n\t  color: #111;\r\n\t}\r\n\tbody.dark-mode div {\r\n\t\tb" +
                    "ackground-color: #111;\r\n\t\tcolor: #ccc;\r\n\t}\r\n\tbody.light-mode div {\r\n\t\tbackground" +
                    "-color: #eee;\r\n\t\tcolor: #111;\r\n\t}\r\n\tbody.dark-mode button {\r\n\t  background-color" +
                    ": #ddd;\r\n\t  color: #111;\r\n\t}\r\n\r\n\tbody.light-mode {\r\n\t  background-color: #eee;\r\n" +
                    "\t  color: #111;\r\n\t}\r\n\tbody.light-mode a {\r\n\t  color: #111;\r\n\t}\r\n\tbody.light-mode" +
                    " button {\r\n\t  background-color: #111;\r\n\t  color: #ccc;\r\n\t}\r\n\t#items{\r\n\t  display" +
                    ": flex;\r\n\t  flex: 0;\r\n\t  flex-direction: column;\r\n\t  max-width: 785px;\r\n\t}\r\n\r\n\tt" +
                    "h{ text-align:left }\r\n\t.region { text-align: center; font-weight: bold; }\r\n\t[dat" +
                    "a-content]:before { content: attr(data-content); }\r\n\r\n\t.dark-mode .spoiler{ back" +
                    "ground-color:#ccc }\r\n\t.dark-mode .spoiler:active { background-color: #111;  }\r\n\t" +
                    ".dark-mode .show-highlight .unavailable .newlocation { background-color: #500705" +
                    "; }\r\n\t.dark-mode .show-highlight .acquired .newlocation { background-color: #695" +
                    "91f; }\r\n\t.dark-mode .show-highlight .available .newlocation { background-color: " +
                    "#313776; }\r\n\r\n\t.light-mode .spoiler{ background-color:#111 }\r\n\t.light-mode .spoi" +
                    "ler:active { background-color: #ccc;  }\r\n\t.light-mode .show-highlight .unavailab" +
                    "le .newlocation { background-color: #FF9999; }\r\n\t.light-mode .show-highlight .ac" +
                    "quired .newlocation { background-color: #99FF99; }\r\n\t.light-mode .show-highlight" +
                    " .available .newlocation { background-color: #9999FF; }\r\n\r\n\r\n\t#spoilerLogState {" +
                    " width: 560px; }\r\n\t#index {\r\n\t  border: 1px solid black;\r\n\t  display: flex;\r\n\t  " +
                    "flex-direction: inline-flex;\r\n\t  float: right;\r\n\t  flex: 1;\r\n\t  right: 10px;\r\n\t " +
                    " margin: 5px;\r\n\t  max-height: 700px;\r\n\t  width: 180px;\r\n\t  justify-content: cent" +
                    "er;\r\n\t  overflow-y: auto;\r\n\t  }\r\n\t.fixed {\r\n\tposition: fixed;\r\n\ttop: 0;\r\n\t}\r\n\t#i" +
                    "ndex.light-mode {\r\n\t\tbackground-color: #eee;\r\n\t\tcolor: #111;\r\n\t}\r\n    #index.dar" +
                    "k-mode a {\r\n\t  color: #ccc;\r\n\t}\r\n\t#index.dark-mode {\r\n\t  background-color: #111;" +
                    "\r\n\t  color: #ccc;\r\n\t}\r\n</style>\r\n</head>\r\n<body class=\"light-mode\">\r\n<label><b>V" +
                    "ersion: </b></label><span>");
            this.Write(this.ToStringHelper.ToStringWithCulture(spoiler.Version));
            this.Write("</span><br/>\r\n<label><b>Settings: </b></label><code style=\"word-break: break-all;" +
                    "\">");
            this.Write(this.ToStringHelper.ToStringWithCulture(spoiler.SettingsString));
            this.Write("</code><br/>\r\n<label><b>Seed: </b></label><span>");
            this.Write(this.ToStringHelper.ToStringWithCulture(spoiler.Seed));
            this.Write("</span><br/>\r\n<br/>\r\n<table class=\"index\" id=\"index\">\r\n    <th><h2>Termina Index<" +
                    "/h2></th>\r\n    ");
 foreach (var region in spoiler.ItemList.GroupBy(item => item.Region).OrderBy(g => g.Key))
        { 
            this.Write("            <tr><td><a href=\"#");
            this.Write(this.ToStringHelper.ToStringWithCulture(region.Key.Name()));
            this.Write("\">");
            this.Write(this.ToStringHelper.ToStringWithCulture(region.Key.Name()));
            this.Write("</a></td></tr>");

        } 
            this.Write("</table>\r\n<button type=\"button\" onclick=\"toggleDarkLight()\" title=\"Toggle dark/li" +
                    "ght mode\">Toggle Dark Theme</button>\r\n<br/>\r\n<br/>\r\n<label><b>Spoiler Log State:" +
                    " </b></label><input id=\"spoilerLogState\" type=\"text\"/><br/>\r\n\r\n");
 if (spoiler.DungeonEntrances.Any()) { 

            this.Write("<h2>Dungeon Entrance Replacements</h2>\r\n<table border=\"1\" class=\"item-replacement" +
                    "s\">\r\n\t<tr>\r\n\t\t<th>Entrance</th>\r\n\t\t<th></th>\r\n\t\t<th>New Destination</th>\r\n\t</tr>" +
                    "\r\n");
         foreach (var kvp in spoiler.DungeonEntrances) {
			var entrance = kvp.Key;
			var destination = kvp.Value;
            this.Write("\t<tr data-id=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture((int)destination));
            this.Write("\" data-newlocationid=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture((int)entrance));
            this.Write("\" class=\"unavailable\">\r\n\t\t<td class=\"newlocation\">");
            this.Write(this.ToStringHelper.ToStringWithCulture(entrance.Entrance()));
            this.Write("</td>\r\n\t\t<td><input type=\"checkbox\"/></td>\r\n\t\t<td class=\"spoiler itemname\"><span " +
                    "data-content=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(destination.Entrance()));
            this.Write("\"></span></td>\r\n\t</tr>\r\n");
 } 
            this.Write("</table>\r\n");
 } 
            this.Write("<h2>Item Replacements</h2>\r\n<input type=\"checkbox\" id=\"highlight-checks\"/> Highli" +
                    "ght available checks\r\n<table border=\"1\" class=\"item-replacements\">\r\n <tr>\r\n\t <th" +
                    ">Location</th>\r\n\t <th></th>\r\n\t <th></th>\r\n </tr>\r\n");
 foreach (var region in spoiler.ItemList.GroupBy(item => item.Region).OrderBy(g => g.Key)) {

            this.Write(" <tr class=\"region\" id=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(region.Key.Name()));
            this.Write("\"><td colspan=\"3\">");
            this.Write(this.ToStringHelper.ToStringWithCulture(region.Key.Name()));
            this.Write("</td></tr>\r\n ");
 foreach (var item in region.OrderBy(item => item.NewLocationName)) { 
            this.Write(" <tr data-id=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Id));
            this.Write("\" data-newlocationid=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.NewLocationId));
            this.Write("\" class=\"unavailable\">\r\n\t<td class=\"newlocation\">");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.NewLocationName));
            this.Write("</td>\r\n\t<td><input type=\"checkbox\"/></td>\r\n\t<td class=\"spoiler itemname\"> <span d" +
                    "ata-content=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            this.Write("\"></span></td>\r\n </tr>\r\n ");
 } 
 } 
            this.Write("</table>\r\n<h2>Item Locations</h2>\r\n<table border=\"1\" id=\"item-locations\">\r\n <tr>\r" +
                    "\n\t <th>Item</th>\r\n\t <th></th>\r\n\t <th>Location</th>\r\n </tr>\r\n");
 foreach (var itemCategory in spoiler.ItemList.Where(item => !item.IsJunk).GroupBy(item => item.ItemCategory).OrderBy(g => g.Key)) {

            this.Write(" <tr class=\"region\"><td colspan=\"3\">");
            this.Write(this.ToStringHelper.ToStringWithCulture(itemCategory.Key.ToString()));
            this.Write("</td></tr>\r\n ");
 foreach (var item in itemCategory.OrderBy(item => item.Id)) { 
            this.Write(" <tr data-id=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Id));
            this.Write("\" data-newlocationid=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.NewLocationId));
            this.Write("\">\r\n\t<td>");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            this.Write("</td>\r\n\t<td><input type=\"checkbox\"/></td>\r\n\t<td class=\"spoiler newlocation\"> <spa" +
                    "n data-content=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.NewLocationName));
            this.Write("\"></span></td>\r\n </tr>\r\n ");
 } 
 } 
            this.Write("</table>\r\n");
 if (spoiler.MessageCosts.Count > 0) { 

            this.Write("<h2>Randomized Prices</h2>\r\n<table border=\"1\">\r\n\t<tr>\r\n\t\t<th>Name</th>\r\n\t\t<th>Cos" +
                    "t</th>\r\n\t</tr>\r\n");
    foreach (var (name, cost) in spoiler.MessageCosts) { 

            this.Write("\t<tr>\r\n\t\t<td>");
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            this.Write("</td>\r\n\t\t<td class=\"spoiler\"><span data-content=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(cost));
            this.Write("\"></span></td>\r\n\t</tr>\r\n");
 } 
            this.Write("</table>\r\n");
 } 
 if (spoiler.GossipHints != null && spoiler.GossipHints.Any()) { 

            this.Write("<h2>Gossip Stone Hints</h2>\r\n<table border=\"1\">\r\n\t<tr>\r\n\t\t<th>Gossip Stone</th>\r\n" +
                    "\t\t<th>Message</th>\r\n\t</tr>\r\n");
    foreach (var hint in spoiler.GossipHints.OrderBy(h => h.Key.ToString())) { 

            this.Write("\t<tr>\r\n\t\t<td>");
            this.Write(this.ToStringHelper.ToStringWithCulture(hint.Key));
            this.Write("</td>\r\n\t\t<td class=\"spoiler\"><span data-content=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(hint.Value));
            this.Write("\"></span></td>\r\n\t</tr>\r\n");
 } 
            this.Write("</table>\r\n");
 } 
            this.Write("<script>\r\n\tfunction all(list, predicate) {\r\n\t\tfor (var i = 0; i < list.length; i+" +
                    "+) {\r\n\t\t\tif (!predicate(list[i])) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true" +
                    ";\r\n\t}\r\n\r\n\tfunction any(list, predicate) {\r\n\t\tfor (var i = 0; i < list.length; i+" +
                    "+) {\r\n\t\t\tif (predicate(list[i])) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;" +
                    "\r\n\t}\r\n\r\n\tfunction includes(list, item) {\r\n\t\tfor (var i = 0; i < list.length; i++" +
                    ") {\r\n\t\t\tif (list[i] === item) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t" +
                    "}\r\n\r\n\tfunction find(list, predicate) {\r\n\t\tfor (var i = 0; i < list.length; i++) " +
                    "{\r\n\t\t\tif (predicate(list[i])) {\r\n\t\t\t\treturn list[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r" +
                    "\n\t}\r\n\t\r\n\tvar segmentSize = 16;\r\n\tfunction saveItems() {\r\n\t\tvar segments = [];\r\n\t" +
                    "\tfor (var i = 0; i < logic.length; i++) {\r\n\t\t\tvar segmentIndex = parseInt(i / se" +
                    "gmentSize);\r\n\t\t\tsegments[segmentIndex] = segments[segmentIndex] || 0;\r\n\t\t\tif (lo" +
                    "gic[i].Checked) {\r\n\t\t\t\tsegments[parseInt(i / segmentSize)] += (1 << (i%segmentSi" +
                    "ze));\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar saveString = segments.map(function(s) {\r\n\t\t\treturn s.toS" +
                    "tring(16);\r\n\t\t}).join(\"-\");\r\n\t\tvar saveInput = document.querySelector(\"#spoilerL" +
                    "ogState\");\r\n\t\tsaveInput.value = saveString;\r\n\t}\r\n\r\n\tfunction loadItems() {\r\n\t\tva" +
                    "r saveInput = document.querySelector(\"#spoilerLogState\");\r\n\t\tvar segments = save" +
                    "Input.value.split(\"-\");\r\n\t\tif (Math.ceil((logic.length - 1) / segmentSize) !== s" +
                    "egments.length) {\r\n\t\t\talert(\"Invalid Spoiler Log state\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tse" +
                    "gments = segments.map(function(segment) {\r\n\t\t\treturn parseInt(segment, 16);\r\n\t\t}" +
                    ");\r\n\t\tvar locationsToCheck = [];\r\n\t\tfor (var i = 0; i < segments.length; i++) {\r" +
                    "\n\t\t\tvar segment = segments[i];\r\n\t\t\tfor (var j = 0; j < segmentSize; j++) {\r\n\t\t\t\t" +
                    "var itemIndex = segmentSize * i + j;\r\n\t\t\t\tif (itemIndex < logic.length) {\r\n\t\t\t\t\t" +
                    "var mark = ((segment >> j) % 2 == 1);\r\n\t\t\t\t\tlogic[itemIndex].Checked = mark;\r\n\t\t" +
                    "\t\t\tvar itemRow = document.querySelector(\"tr[data-newlocationid=\'\" + itemIndex + " +
                    "\"\']\");\r\n\t\t\t\t\tif (itemRow) {\r\n\t\t\t\t\t\tlogic[itemRow.dataset.id].Acquired = mark;\r\n\t" +
                    "\t\t\t\t} else {\r\n\t\t\t\t\t\tlogic[itemIndex].Acquired = mark;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!include" +
                    "s(locationsToCheck, itemIndex)) {\r\n\t\t\t\t\t\tlocationsToCheck.push(itemIndex);\r\n\t\t\t\t" +
                    "\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcheckLocations(locationsToCheck);\r\n\t}\r\n\r\n\tdocument.query" +
                    "Selector(\"#spoilerLogState\").addEventListener(\"keypress\", function(event) {\r\n\t\ti" +
                    "f (event.keyCode === 13) {\r\n\t\t\tloadItems();\r\n\t\t}\r\n\t});\r\n\r\n\tfunction checkLocatio" +
                    "ns(locations) {\r\n\t\tvar itemsToCheck = [];\r\n\t\tfor (var i = 0; i < locations.lengt" +
                    "h; i++) {\r\n\t\t\tvar location = logic[locations[i]];\r\n\t\t\tlocation.IsAvailable = \r\n\t" +
                    "\t\t\t(location.RequiredItemIds === null || location.RequiredItemIds.length === 0 |" +
                    "| all(location.RequiredItemIds, function(id) { return logic[id].Acquired; }))\r\n\t" +
                    "\t\t\t&& \r\n\t\t\t\t(location.ConditionalItemIds === null || location.ConditionalItemIds" +
                    ".length === 0 || any(location.ConditionalItemIds, function(conditionals) { retur" +
                    "n all(conditionals, function(id) { return logic[id].Acquired; }); }));\r\n\t\t\t\r\n\t\t\t" +
                    "var newLocation = find(logic, function(io) { return io.NewLocationId === locatio" +
                    "ns[i]; });\r\n\t\t\tif (!newLocation) {\r\n\t\t\t\tnewLocation = location;\r\n\t\t\t}\r\n\t\t\tif (!n" +
                    "ewLocation.Acquired && location.IsFakeItem && location.IsAvailable) {\r\n\t\t\t\tnewLo" +
                    "cation.Acquired = true;\r\n\t\t\t\titemsToCheck.push(newLocation.ItemId);\r\n\t\t\t}\r\n\t\t\tif" +
                    " (newLocation.Acquired && location.IsFakeItem && !location.IsAvailable) {\r\n\t\t\t\tn" +
                    "ewLocation.Acquired = false;\r\n\t\t\t\titemsToCheck.push(newLocation.ItemId);\r\n\t\t\t}\r\n" +
                    "\t\t\r\n\t\t\tvar locationRows = document.querySelectorAll(\".item-replacements tr[data-" +
                    "newlocationid=\'\" + locations[i] + \"\']\");\r\n\t\t\tfor (const locationRow of locationR" +
                    "ows) {\r\n\t\t\t\tlocationRow.className = \"\";\r\n\t\t\t\tlocationRow.classList.add(location." +
                    "IsAvailable ? \"available\" : \"unavailable\");\r\n\t\t\t\tvar itemName = locationRow.quer" +
                    "ySelector(\".itemname\");\r\n\t\t\t\tvar checkbox = locationRow.querySelector(\"input\");\r" +
                    "\n\t\t\t\tcheckbox.checked = location.Checked;\r\n\t\t\t\tif (location.Checked) {\r\n\t\t\t\t\tite" +
                    "mName.classList.remove(\"spoiler\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\titemName.classList.add(\"s" +
                    "poiler\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\tvar itemRows = document.querySelectorAll(\"#item-l" +
                    "ocations tr[data-newlocationid=\'\" + locations[i] + \"\']\");\r\n\t\t\tfor (const itemRow" +
                    " of itemRows) {\r\n\t\t\t\tvar itemName = itemRow.querySelector(\".newlocation\");\r\n\t\t\t\t" +
                    "var checkbox = itemRow.querySelector(\"input\");\r\n\t\t\t\tvar item = logic[itemRow.dat" +
                    "aset.id];\r\n\t\t\t\tcheckbox.checked = item.Acquired;\r\n\t\t\t\tif (item.Acquired) {\r\n\t\t\t\t" +
                    "\titemName.classList.remove(\"spoiler\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\titemName.classList.ad" +
                    "d(\"spoiler\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (itemsToCheck.length > 0) {\r\n\t\t\tcheckItems" +
                    "(itemsToCheck);\r\n\t\t} else {\r\n\t\t\tsaveItems();\r\n\t\t}\r\n\t}\r\n\r\n\tvar logic = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(spoiler.LogicJson));
            this.Write(";\r\n\r\n\tfor (var i = 0; i < logic.length; i++) {\r\n\t\tvar item = logic[i];\r\n\t\tif (ite" +
                    "m.Acquired) {\r\n\t\t\titem.Checked = true;\r\n\t\t\tvar inputs = document.querySelectorAl" +
                    "l(\"tr[data-newlocationid=\'\" + i + \"\'] input\");\r\n\t\t\tfor (const input of inputs) {" +
                    "\r\n\t\t\t\tinput.checked = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (item.RequiredItemIds !== null) {\r\n" +
                    "\t\t\tfor (var j = 0; j < item.RequiredItemIds.length; j++) {\r\n\t\t\t\tvar id = item.Re" +
                    "quiredItemIds[j];\r\n\t\t\t\tif (!logic[id].LocksLocations) {\r\n\t\t\t\t\tlogic[id].LocksLoc" +
                    "ations = [];\r\n\t\t\t\t}\r\n\t\t\t\tif (!includes(logic[id].LocksLocations, i)) {\r\n\t\t\t\t\tlog" +
                    "ic[id].LocksLocations.push(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (item.ConditionalItemIds " +
                    "!== null) {\r\n\t\t\tfor (var k = 0; k < item.ConditionalItemIds.length; k++) {\r\n\t\t\t\t" +
                    "for (var j = 0; j < item.ConditionalItemIds[k].length; j++) {\r\n\t\t\t\t\tvar id = ite" +
                    "m.ConditionalItemIds[k][j];\r\n\t\t\t\t\tif (!logic[id].LocksLocations) {\r\n\t\t\t\t\t\tlogic[" +
                    "id].LocksLocations = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!includes(logic[id].LocksLocations, i" +
                    ")) {\r\n\t\t\t\t\t\tlogic[id].LocksLocations.push(i);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t" +
                    "function checkItems(itemIds) {\r\n\t\tvar locationsToCheck = [];\r\n\t\tfor (var i = 0; " +
                    "i < itemIds.length; i++) {\r\n\t\t\tvar itemId = itemIds[i];\r\n\t\t\tif (logic[itemId].Lo" +
                    "cksLocations) {\r\n\t\t\t\tfor (var j = 0; j < logic[itemId].LocksLocations.length; j+" +
                    "+) {\r\n\t\t\t\t\tvar locationId = logic[itemId].LocksLocations[j];\r\n\t\t\t\t\tif (!includes" +
                    "(locationsToCheck, locationId)) {\r\n\t\t\t\t\t\tlocationsToCheck.push(locationId);\r\n\t\t\t" +
                    "\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcheckLocations(locationsToCheck);\r\n\t}\r\n\r\n\tvar startingL" +
                    "ocations = [0, 96, 278, 279, 280, 281];\r\n\tfor (var id of startingLocations) {\r\n\t" +
                    "\tlogic[id].Checked = true;\r\n\t\tvar row = document.querySelector(\"tr[data-newlocat" +
                    "ionid=\'\" + id + \"\']\");\r\n\t\tvar itemId = id;\r\n\t\tif (row) {\r\n\t\t\titemId = row.datase" +
                    "t.id;\r\n\t\t\tdocument.querySelector(\"tr[data-newlocationid=\'\" + id + \"\'] input\").ch" +
                    "ecked = true;\r\n\t\t}\r\n\t\tlogic[itemId].Acquired = true;\r\n\t}\r\n\r\n\tvar allLocationIds " +
                    "= [];\r\n\tfor (var i = 0; i < logic.length; i++) {\r\n\t\tallLocationIds.push(i);\r\n\t}\r" +
                    "\n\tcheckLocations(allLocationIds);\r\n\r\n\tvar rows = document.querySelectorAll(\"tr\")" +
                    ";\r\n\tfor (var i = 1; i < rows.length; i++) {\r\n\t\tvar row = rows[i];\r\n\t\tvar checkbo" +
                    "x = row.querySelector(\"input\");\r\n\t\tif (checkbox) {\r\n\t\t\tcheckbox.addEventListener" +
                    "(\"click\", function(e) {\r\n\t\t\t\tvar row = e.target.closest(\"tr\");\r\n\t\t\t\tvar rowId = " +
                    "parseInt(row.dataset.id);\r\n\t\t\t\tvar newLocationId = parseInt(row.dataset.newlocat" +
                    "ionid);\r\n\t\t\t\tlogic[newLocationId].Checked = e.target.checked;\r\n\t\t\t\tlogic[rowId]." +
                    "Acquired = e.target.checked;\r\n\t\t\t\tcheckLocations([newLocationId]);\r\n\t\t\t\tcheckIte" +
                    "ms([rowId]);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tdocument.querySelector(\"#highlight-checks\").ad" +
                    "dEventListener(\"click\", function(e) {\r\n\t\tvar tables = document.querySelectorAll(" +
                    "\"table.item-replacements\");\r\n\t\tfor (var i = 0; i < tables.length; i++) {\r\n\t\t\tif " +
                    "(e.target.checked) {\r\n\t\t\t\ttables[i].classList.add(\"show-highlight\");\r\n\t\t\t} else " +
                    "{\r\n\t\t\t\ttables[i].classList.remove(\"show-highlight\");\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tfuncti" +
                    "on toggleDarkLight() {\r\n\t\tvar body = document.getElementsByTagName(\'body\')[0];\r\n" +
                    "\t\tvar currentClassBody = body.className;\r\n        var ind = document.getElementB" +
                    "yId(\'index\');\r\n\t\tbody.className = currentClassBody === \"dark-mode\" ? \"light-mode" +
                    "\" : \"dark-mode\";\r\n        index.className = currentClassBody === \"dark-mode\" ? \"" +
                    "light-mode\" : \"dark-mode\";\r\n\t}\r\n\r\n    window.onscroll = function() { indFloat()}" +
                    ";\r\n    var index = document.getElementById(\'index\');\r\n    function indFloat()\r\n " +
                    "   {\r\n        if (window.pageYOffset > document.getElementById(\'index\').offsetTo" +
                    "p)\r\n        {\r\n            index.classList.add(\'fixed\');\r\n        }\r\n        els" +
                    "e\r\n        {\r\n            index.classList.remove(\'fixed\');\r\n        }\r\n    }\r\n</" +
                    "script>\r\n</body>\r\n</html>\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class HtmlSpoilerBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
